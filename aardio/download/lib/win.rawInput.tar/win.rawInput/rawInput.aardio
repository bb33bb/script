namespace win.rawInput;

class RAWINPUTDEVICE{
    WORD usagePage;  
    WORD usage; 
    INT flags;
    int hwndTarget;  
}

RAWMOUSE = class { 
    WORD flags;  
    union buttons = { 
        INT buttons;
        struct data = {
            WORD buttonFlags;
            WORD buttonData;
        };
    };
    INT rawButtons; 
    int lastX; 
    int lastY;
    INT extraInformation;
}
var RAWMOUSE = RAWMOUSE;

RAWKEYBOARD = class { 
    WORD makeCode; 
    WORD flags;
    WORD reserved;
    WORD vKey;
    INT message; 
    INT extraInformation; 
}
var RAWKEYBOARD = RAWKEYBOARD;

RAWHID = class {
    INT sizeHid; 
    INT count; 
    BYTE rawData[1];
}
var RAWHID = RAWHID;

RAWINPUTHEADER = class {
    INT dwType;
    INT size;
    int device;
    int param;
}
var RAWINPUTHEADER = RAWINPUTHEADER;

RAWINPUT = class {
    struct header = RAWINPUTHEADER();
    union data={
        struct mouse = RAWMOUSE();
        struct keyboard = RAWKEYBOARD();
        struct hid = RAWHID();
    };
}

RegisterRawInputDevices = ::User32.api( "RegisterRawInputDevices", "bool(struct rawInputDevices,INT numDevices,INT size)");
GetRawInputData = ::User32.api( "GetRawInputData", "INT(int hRawInput,INT command,pointer pData,INT &cbData,INT sizeHeader)");

register = function(winform){
    var hwnd =winform[["hwnd"]] :winform;
    var rid = RAWINPUTDEVICE();
    rid.usagePage = 0x01;
    rid.usage = 0x06;
    rid.flags = 0x100/*_RIDEV_INPUTSINK*/;
    rid.hwndTarget = winform.hwnd;
    
    RegisterRawInputDevices(rid, 1, ..raw.sizeof(rid));
     
}
  
var rawInput = RAWINPUT();  

getData = function(lparam){ 
    
    var ret,size = GetRawInputData(lparam, 0x10000003/*_RID_INPUT*/, , 0 ,16/*raw.sizeof(RAWINPUTHEADER() )*/ ); 
    if(!size)
        return; //出错了;
        
    var pdata = ..raw.malloc( ..math.max(40/*..raw.sizeof(rawInput)*/,size ) ) 
    
    var ret,size = GetRawInputData(lparam, 0x10000003/*_RID_INPUT*/, pdata, size , 16/*raw.sizeof(RAWINPUTHEADER() )*/ ) ; 
    if(ret != size )
        return; //出错了
    
    ..raw.convert(pdata,rawInput); 
    return rawInput  
}


/**intellisense(win.rawInput)
register(__/*窗口对象或句柄*/) = 注册RAWINPUT窗口
getData(lparam) = 返回win.rawInput.RAWINPUT()对象
end intellisense**/

/**intellisense()
!rawmouse.flags = Indicator flags.  
!rawmouse.buttons.buttons = The transition state of the mouse buttons. 
!rawmouse.buttons.data.buttonFlags =  
!rawmouse.buttons.data.buttonData =  
!rawmouse.rawButtons = The raw state of the mouse buttons. 
!rawmouse.lastX = The signed relative or absolute motion in the X direction. 
!rawmouse.lastY = The signed relative or absolute motion in the Y direction. 
!rawmouse.extraInformation = revice-specific additional information for the event. 
!rawkeyboard.makeCode = thhe "make" scan code (key depression). 
!rawkeyboard.rawkeyboard.flags = The flags field indicates a "break" (key release) and pointer  miscellaneous scan code information 
!rawkeyboard.reserved; 
!rawkeyboard.vKey = 
!rawkeyboard.message = 
!rawkeyboard.extraInformation = Device-specific additional information for the event. 
!rawhid.sizeHid = byte size of each report
!rawhid.count = number of input packed
!rawhid.rawData[1] = 
!rawheader.dwType = @.dwType = _RIM_TYPE__ ;
!rawheader.size = 
!rawheader.device = 
!rawheader.param =  
var RAWINPUT = class {
!rawinput.header = !rawheader.
!rawinput.data.mouse = !rawmouse.
!rawinput.data.keyboard = !rawkeyboard.
!rawinput.data.hid = !rawhid. 
?win.rawInput.getData = !rawinput.
end intellisense**/