import process.popen;
namespace process;

class mplayer {

	ctor( playerPath,winform,path,... ){
		if( !path ){
			return null,"请指定视频文件路径"
		}
		if( ! ( winform[["hwnd"]] ? winform.isForm ) ){
			error("参数@2必须是win.form窗体对象",2);
		}
		if( winform.mplayer ? winform.mplayer.quit ){
			winform.mplayer.quit();
		}
		
		if( !... ) {
			this.core = ..process.popen( playerPath, ..io.fullpath(path),
			"-slave","-wid",tostring( winform[["hwnd"]] ),"-vo","gl","-quiet", 
			  "-mc","0",   "-fontconfig","0","-subcp", "936")
		}
		else {
			this.core = ..process.popen( playerPath, ..io.fullpath(path),
			"-slave","-wid",tostring( winform[["hwnd"]] ),... )
		}
		
		if( !this.core ) return;
		this.print = this.core.print; 
		this.printf = this.core.printf; 
		this.expect = this.core.expect;
		
		winform.mplayer = this;
		
		//首次启动初始化较慢,下面的代码用于确认初始化完成
		this.print("get_property path"); 
		this.path = this.expect("ANS_path=(\N+?)\s*\r*\n");
	};  
	loadfile = function(path,append){
		if(!path) return;
		path = ..io.fullpath(path);
		path = ..string.replace(path,"@@\","\\"); 
		
		this.printf( 'loadfile "%s" %d',path,append?1:0);
	};
	subLoad = function(path){
		if(!path) return;
		path = ..io.fullpath(path);
		path = ..string.replace(path,"@@\","\\");
	
		this.printf( 'sub_load "%s" ',path ); 
		var out  = this.expect("\N+",1000)
		if( out ){
			var value = ..string.match(out,"SUB\:\s*Added subtitle file\s*\((\d+)\)")
			if( value ) this.subSelect(value);
			if( value ) return tonumber(value);
		}
	}; 
	subSelect = function(value){
		this.print( "sub_select",value ); 
	};
	subAlignment = function(value){
		this.print( "sub_alignment",value ); 
	}; 
	subDelay = function(value,abs){
		this.print( "sub_delay",value,abs?1:0 ); 
	};  
	pause = function(){
		this.print( "pause" );  
	};  
	frameStep = function(){
		this.print( "frame_step"); 
	};
	seek = function(value){
		this.print( "seek",value,'0'); 
	};
	seekPercent = function(value){
		this.print( "seek",value,'1'); 
	};
	seekSecond = function(value){
		this.print( "seek",value,'2'); 
	};
	volume = function(value,abs){
		this.print( "volume",value,abs?1:0); 
	}; 
	keyDownEvent = function(value){
		this.print( "key_down_event ",value); 
	};
	fullscreen = function(value){ 
		if( winform.fullscreen(value) ){
			winform.registCommand(
				function(id,event){
				 	 winform.fullscreen(false);
				},0x2/*_IDCANCEL*/		
			)
		} 
	};
	getFullscreen = function(){ 
		return winform.restoreFullScreen;
	};
	getProperty = function(name,timeout){
		if( timeout === null ) timeout = 100;
		this.print("get_property",name); 
		var out  = this.expect("ANS\N+=(\N+?)\s*\r*\n",timeout)
		if( out ) return out;	
	};
	setProperty = function(name,value){
		this.print("set_property",name,value);  
	};
	isPaused = function(){
		//必须加上pausing_keep_force前缀,不然结果错误,并且自动恢复播放
		this.print("pausing_keep_force get_property pause"); 
		var out  = this.expect("ANS\N+=(\N+?)\s*\r*\n",100) 
		return out == "yes";	
	};
	getVideoResolution = function(){
		this.print("get_video_resolution"); 
		var x,y = this.expect("ANS_VIDEO_RESOLUTION='(\d+) x (\d+)'",100)
		if( x ) return tonumber(x),tonumber(y);
	};
	getPercentPos = function(){
		this.print("get_percent_pos"); 
		var out  = this.expect("ANS_PERCENT_POSITION=(\d+)",100)
		if( out ) return tonumber( out );
	};
	getTimeLength = function(){
		this.print("get_time_length"); 
		var out  = this.expect("ANS_LENGTH=([\d\.]+)",100)
		if( out ) return tonumber( out ); 
	};
	getTimePos = function(){
		this.print("get_time_pos"); 
		var out  = this.expect("ANS_TIME_POSITION=([\d\.]+)",100)
		if( out ) return tonumber( out );  
	};
	stop = function(){
		this.print( "stop"); 
	};
	quit  = function(exitCode){
		this.print( "quit",exitCode : 0); 
		this.core.close();
	};  
}
 
//开发文档 http://www.mplayerhq.hu/DOCS/tech/slave.txt
/**intellisense()
process.mplayer(.(播放器路径,输出窗口句柄,默认视频路径,其他启动参数,->->-> ) = 创建播放器\n除参数@1,@2,@3以外其他参数可选 - 启动参数用于process.popen
process.mplayer() = !process_mplayer.
!process_mplayer.core = 播放器进程\n!process_popen.
!process_mplayer.expect(  = 等待直到模式匹配成功,返回匹配结果,
!process_mplayer.expect(.("模式表达式",超时,文本最大长度) = 超时参数是以毫秒为单位的估算值,可省略\n参数@3可省略，默认为1024
!process_mplayer.print("__") = 写入命令，支持一个或多个参数\n多个参数间添加空格,尾部添加换行
!process_mplayer.printf("__") = 写入命令，\n调用string.format函数格式化参数,尾部添加换行
!process_mplayer.keyDownEvent(.(虚拟键码) = 发送按键事件
!process_mplayer.getResponse(.("模式表达式") = 获取格式输出
!process_mplayer.loadfile( = 打开视频文件
!process_mplayer.loadfile(.("视频文件",是否添加到播放列表) = 参数@2默认为false
!process_mplayer.subLoad( = 添加字幕文件
!process_mplayer.subLoad(.("字幕文件") = 添加字幕文件
!process_mplayer.stop() = 停止播放
!process_mplayer.quit() = 退出
!process_mplayer.pause() = 暂停
!process_mplayer.frameStep() = 播放一帧
!process_mplayer.quit() = 退出\n
!process_mplayer.subAlignment( = 字幕对齐\n0 顶部对齐\n1 居中对齐\n2 底部对齐
!process_mplayer.subDelay( = 调整字幕偏移值
!process_mplayer.subDelay(.(偏移值,是否绝对值) = 参数@2可省略
!process_mplayer.volume( = 调整声音大小
!process_mplayer.volume(.(音量,是否绝对值) = 参数@1为百分比\n参数@2请指定为true
!process_mplayer.getVideoResolution() = 返回视频分辨率\n返回两个值
!process_mplayer.fullscreen(__/*是否全屏*/) = 设置全屏
!process_mplayer.getFullscreen() = 当前是否全屏
!process_mplayer.getPercentPos() = 返回播放进度\n百分比
!process_mplayer.getTimeLength() = 返回视频总长度
!process_mplayer.getTimePos() = 返回当前播放位置\n视频播放结束返回null
!process_mplayer.seekSecond( = 移动到指定位置
!process_mplayer.seekPercent( = 按百分比移动到指定位置
!process_mplayer.seek( = 移动到指定位置\n参数为相对当前位置的值
!process_mplayer.getProperty("__/*名字*/") = 获取属性值\n可选使用参数@2指定超时,默认为100毫秒,传入0表示禁用超时
!process_mplayer.getProperty(
!process_mplayer.getProperty(.("属性名","属性值") = 修改属性值
!process_mplayer.isPaused() = 当前是否暂停状态
end intellisense**/
