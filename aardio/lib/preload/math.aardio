namespace preload;
self.math = global.math;

namespace math;

mulDiv = ::Kernel32.api( "MulDiv", "int(int a,int b,int c)"); 

_size64_meta._add = function(b){
	return size64(owner).add(b);
};
_size64_meta._sub = function(b){
	return size64(owner).sub(b);
};
_size64_meta._mod = function(b){
	return size64(owner).mod(b);
};
_size64_meta._div = function(b){
	return size64(owner).div(b);
};
_size64_meta._mul = function(b){
	return size64(owner).mul(b);
};
_size64_meta._lshift = function(b){
	return size64(owner).lshift(b);
};
_size64_meta._rshift = function(b){
	return size64(owner).rshift(b);
};
_size64_meta._concat = function(b){
	return tostring(owner) ++ tostring(b);
};
_size64_meta.swap = function(){
	var a,b = owner.split32();
	return size64(..raw.swap(b),..raw.swap(a));
};
isSize64  = function(v){
	return v@ == _size64_meta;
};
isFinite = function(v){
	return (type(v) == "number") &&  (v==v) &&  (v != 1/0) && (v !=-1/0)
};
isInteger = function(v) {
  return isFinite(v) &&  (floor(v) === v);
};
roundToEven = function (v,p){ 
    p = p : 0;
    var d = v * ( 10 ** p );
    var i,n = floor(d),floor(d*10); 
    if( n== d*10 && n%5==0 && i%2 == 0) return i/( 10 ** p ); 
    else return round(v,p); 
}; 

/**intellisense(math)
mulDiv(.(a,b,c) = 返回a乘b再除以c的结果,并自动四舍五入转为整数\n可尽量使运算不会溢出,运算错误则返回-1
round(.(数值,精度) = 四舍五入,\n精度指定小数后的位数,默认为0(取整)
roundToEven(.(数值,精度) = 银行家舍入法\n四舍六入五取偶\n精度指定小数后的位数,默认为0(取整)
isSize64(__) = 判断参数是否math.size64长整数对象
isFinite(__) = 如果参数是一个有效数值,并且不是正负无穷大则返回true，否则返回false
isInteger(__) = 参数是一个数值并且是整数返回true，否则返回false
end intellisense**/