//export 导出模块
namespace py2.export;

__staticModuleDef__ = {};

self@ = {

	_set = function(k,v){
		if( ( type(k)!= type.string ) || (type(v) != type.table) ){
			self[[k]] = v;
			return;
		}
		
		var methodDef = {}  
		var callbacks ={}
		var moduleTable = v;
		var moduleName = k;
		if( __staticModuleDef__[moduleName] ){
			error("已经导出过该名称的aardio模块到python",2); 
		}
		
		for(k,v in moduleTable){
			if( type(v) != type.function ) continue ;
			if( type(k) != type.string ) continue ;
			
			callbacks[k] = ..raw.tocdecl(
				function(self_,args){
					var tp = ..py2.tuple(args);	
					var args2 = tp.parseValue();
					tp.stealPtr();
					var ret = invoke(v,owner,..table.unpackArgs(args2) );
					return ..py2.object(ret).stealPtr();
				},"pyObject(pyObject self,pyObject args)",moduleTable);
				
			..table.push(methodDef,{string name=k;ptr method = callbacks[k];int flags = 1|2;string doc = moduleTable[k+"Doc"]: k});
		}
		
		..table.push(methodDef,{string name;ptr method;int flags;string doc })
		
		/*
		Python里需要一直引用函数定义的地址,
		所以要用raw.buffer提前分配内存并保存起来。
		如果你的结构体传给API函数，在调用结束后API还要继续引用那个结构体的内存就需要这么做。
		*/
		__staticModuleDef__[moduleName] = {
			callbacks = callbacks;
			methodDefs = ..raw.buffer( {struct defs[]=methodDef } );
		};
		
		var m = ::Python2.PyImport_AddModuleP(moduleName); 
		if( m ){
			//..py2.IncRef(m);//虽然这里返回的是borrow reference，但这里用不到这个指针，所以不需要增加引用计数 
			if(::Python2.Py_InitModule4(moduleName
				,__staticModuleDef__[moduleName].methodDefs
				,null,null,1013))
				
				return;
		}
	} 
}
