//socks5Client 代理客户端

import wsock.tcp.client;
namespace wsock.tcp;

class socks5Client{
	ctor(ip,port,user,pwd){
		
		this = ..wsock.tcp.client();
		this.realConnect = this.connect;
		
		if( this.realConnect(ip,port) ) {
			var req = {
    			BYTE ver = 5;
    			BYTE nmethods = 1;
    			BYTE methods[] = {user ? 2 : 0};
			}
			this.write(req) 
  			
			var rep = this.read({
    			BYTE ver;
    			BYTE method;
			}); 
			
			if(rep[["ver"]]!=5){
				return null,"服务器不支持SOCKS5协议";
			}
 
			if( rep[["method"]] == 2 ){
				if(! (user && pwd) ){
					return null,"代码服务器需要用户名与密码";
				}
				var req = {
    				BYTE ver = 5;
    				BYTE userLen = #user;
    				BYTE user[] = user;
    				BYTE pwdLen = #pwd;
    				BYTE pwd[] = pwd;
				}
				this.write(req) 
  				
  				var rep = this.read({
    				BYTE ver;
    				BYTE status;
				}); 
				
				if(rep.status!=0) return null,"认证失败"
			}
			elseif(rep[["method"]]){
				return null,"连接代理服务器时遇到错误";
			}
			
			this.connect = function(ip,port){
				if( (port===null) && (ip===null) ) error("请指定IP或端口地址",2);
				var service = ..wsock.sockaddr_in( ip,port );
				if(!service) return;
				service.sin_family = 0x2/*_AF_INET*/
				
				this.write({
      				BYTE ver = 5;BYTE cmd = 1;BYTE rsv = 0;BYTE atyp = 1;struct dstAddr = service.sin_addr; 
				} ); 
				
				this.write( {
    				WORD dstPort = service.sin_port
				} )
				
				var rep = this.read({
    				BYTE ver;BYTE rep;BYTE rsv;BYTE atyp;   
				} )
				
				if(!rep) return false;
				if( rep.atyp =  1 ){
    				this.read({INT bndAddr});
    				this.read({WORD bndPort});
				}  
				else {
    				return false;
				}
				
				if( rep[["rep"]] !== 0 ) return false;   
				
				this.readyState = 1;
				return true; 
        	};
		}
		else {
			return null,"连接服务器失败";
		}
		
	};
}

/**intellisense()
wsock.tcp.socks5Client(.(IP或域名,端口号,用户名,密码) = 创建SOCKS5代理TCP客户端，用户名和密码为可选参数\n连接失败返回null,错误信息
wsock.tcp.socks5Client() = !stdtcpclient.
end intellisense**/
