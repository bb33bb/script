import util.table;
import web.json;

namespace console;

if( _WINE ){
	import console.wine;
	return;
}

getWindow = ::Kernel32.api( "GetConsoleWindow", "int()"); 

getOutPutHandle = function(){
	return topointer( ::Kernel32.GetStdHandle(-11/*_STD_OUTPUT_HANDLE*/) );
}

getInputHandle = function(){
	return topointer( ::Kernel32.GetStdHandle(-10/*_STD_INPUT_HANDLE*/) );
}

getErrorHandle = function(){
	return topointer( ::Kernel32.GetStdHandle(-12/*_STD_ERROR_HANDLE*/) );
}

modifyMode = function(h,remove=0,add=0 ){
	if(h===null) h = getOutPutHandle();
	var mode ={INT value}
	var _,mode = ::Kernel32.GetConsoleMode(h,mode); 
	mode.value = ( mode.value & ~remove ) | add ;
	::Kernel32.SetConsoleMode(h,mode.value);
	return mode;
}

class INPUT_RECORD{
    WORD eventType;
    union event = {
        struct keyEvent = {
    		int bKeyDown;
    		WORD wRepeatCount;
    		WORD wVirtualKeyCode;
    		WORD wVirtualScanCode;
    		union uChar = {
        		WORD unicodeChar;
        		BYTE asciiChar;
    		} ;
    		INT dwControlKeyState;
    		isShiftPressed = function(){
    			return owner.dwControlKeyState & 0x10 
    		};  
    		isScrLkOn = function(){
    			return owner.dwControlKeyState & 0x40 
    		};
    		isRightCtrlPressed = function(){
    			return owner.dwControlKeyState & 0x4 
    		};
    		isRightAltPressed = function(){
    			return owner.dwControlKeyState & 0x1 
    		};
    		isLeftCtrlPressed = function(){
    			return owner.dwControlKeyState & 0x8 
    		};
    		isLeftAltPressed = function(){
    			return owner.dwControlKeyState & 0x2 
    		};
    		isNumLkOn = function(){
    			return owner.dwControlKeyState & 0x20 
    		}; 
    		isCapsLkOn = function(){
    			return owner.dwControlKeyState & 0x80 
    		}; 
    		isEnhanced = function(){
    			return owner.dwControlKeyState & 0x100 
    		};
		}
        struct mouseEvent = {
    		struct dwMousePosition = {word x;word y}
    		INT dwButtonState;
    		INT dwControlKeyState;
    		INT dwEventFlags;
		}
        struct windowBufferSizeEvent={
    		struct dwSize = {word x;word y}
		}
        struct menuEvent={
    		INT dwCommandId;
		}
        struct focusEvent={
    		bool bSetFocus;
		}
    } 
}
 
GetNumberOfConsoleInputEvents = ::Kernel32.api( "GetNumberOfConsoleInputEvents", "bool(pointer hIn,INT & numEvt)");
kbHit = function(){
	var ret,nums = GetNumberOfConsoleInputEvents(getInputHandle(),0)
	return ret ? nums : 0;
}

peek = function(){
	if(kbHit() ) return kbRead(false);
}

kbRead = function(wait){
	var input,ke;
	if(!wait){
		input = readInput(1,0x1/*_KEY_EVENT*/);
		if(#input){
			return input[1].keyEvent; 
		}
	}
	else {
		while( getInputHandle() ){ 
			sleep(100);
			if( kbHit() ){
				input = readInput(1,0x1/*_KEY_EVENT*/);
				if(!#input) continue;
				ke = input[1].keyEvent;
				if( ke.bKeyDown) return ke;
			};
		}
	} 
}

getch = function(){ 
	var chr;
    do{ 
    	chr = kbRead(true).uChar.asciiChar;
    }while(!chr);
    
    if( chr & 0x80 ) 
    	return chr,kbRead(true).uChar.asciiChar;
    	
    return chr;
} 
  
getche = function(mask){
	var c = ..string.pack( getch() );
	writeText( c == '\r'?'\n':(mask:c) );
	return c;
}

getPassword = function(mask="*"){
    
    var s = {};
    var c = getche(mask)
    while( c != '\r' ){
        ..table.push( s,c);
        c = getche( mask )
    } 
    return ..string.join(s)
}

clearInputBuffer = function(){
	::Kernel32.FlushConsoleInputBuffer(getInputHandle());
}

var moreLines = 1;
more = function(count){
	count = count : 1;
	moreLines = moreLines % count;
	if(!moreLines){
		pause(,"-- 请按任意键显示更多 ---","---------- More -----------");
	}
	moreLines++;
};

askYesNo  = function(title){
    log( "[Y/N] " + (title : "按Y键继续,按N键取消") )
 	while(true){ 
		if( kbHit() ){
			var kb = kbRead();
			if(!kb) continue;
			if(kb.bKeyDown) continue;
			
			var vk = kb.wVirtualKeyCode;
			if( vk == 'Y'#){
				return true;
			}
			elseif( vk ==  'N'#){
				return false;
			}
		}
	}	
}

pause = function(close,msg,erase){ 
	open();
	clearInputBuffer();
	if( msg ){
		msg = ..string.toUnicode(msg);
		if( erase ){
			erase = ..string.toUnicode(erase);
			if( #erase < #msg ) erase = erase + ..string.repeat((#msg-#erase)/2 ," ");
		}
		else erase = msg;
	}
	msg := "请按任意键继续 ... "; 
	
	writeText( msg );
	var chr = kbRead(true).wVirtualKeyCode; 
	clearInputBuffer();
	if(#erase) writeText( '\r',erase, '\n'); 
	else {
		writeText('\n'); 
	}
	
	if(close)..io.close();
	return chr;
}

mapEventType2FieldName = {
	[0x10/*_FOCUS_EVENT*/] = "focusEvent";
	[0x1/*_KEY_EVENT*/] = "keyEvent";
	[0x2/*_MOUSE_EVENT*/] = "mouseEvent";
	[0x8/*_MENU_EVENT*/] = "menuEvent";
	[0x4/*_WINDOW_BUFFER_SIZE_EVENT*/] = "windowBufferSizeEvent";
}
 
ReadConsoleInput = Kernel32.api( "ReadConsoleInput", "bool(pointer hIn,struct& brf,INT len,INT &Reads)"); 
readInput = function(len=1,eventType){
	if( len < 1)return;
	var buf = ..raw.toarray( len,"struct","array" );
	buf.array = { INPUT_RECORD() }
	var ok,buf,len = ReadConsoleInput( getInputHandle(),buf,len,len); 
	
	if( ok && len){ 
		var ret = {}
		for(k,input in buf.array){
			if(input.eventType){
				if( eventType && eventType!= input.eventType )
					continue;
					
				var name = mapEventType2FieldName[input.eventType]
				if(name){
					..table.push(ret,{[name] = input.event[name];eventType=input.eventType;eventName = name } )
				}
			}
		} 
		return ret;
	}
} 

_ctrlHandlerThreads = {}
setCtrlHandlerThread = function(handle,add){
	open();
	if( add || (add === null) ){
		var pfunc = _ctrlHandlerThreads[handle] : ..thread.tostdcall(handle,"bool(int ctrlType)");
		::Kernel32.SetConsoleCtrlHandler(pfunc,true );
		_ctrlHandlerThreads[handle] = pfunc;
	
	}
	else{ 
		var pfunc = _ctrlHandlerThreads[handle];
		if(pfunc){
			::Kernel32.SetConsoleCtrlHandler(pfunc,false );
			_ctrlHandlerThreads[handle] = null;
		}
	}
}
..subscribe("beforeUnload",function(){
	for(k,v in _ctrlHandlerThreads){
		 k();
	} 
} );

var init;
open = function(utf8){
    if( utf8!== null ) self.utf8 = true;
    if(self.utf8!==null) ..io.utf8 = self.utf8;
    
    return ..thread.lock("std.console.open",function(){
 		var hwnd = getWindow(); 
		if( ( !hwnd ) || ( !::User32.IsWindowVisible(hwnd) ) ){
			..io.open(); 
			hwnd = getWindow();
		}
		elseif(!init){
			if( ..io.utf8 && ::Kernel32.SetCurrentConsoleFontEx ){
				if( ::Kernel32.GetConsoleCP()!=65001 ){
					..io.open();
				}
			}
		}
		
		if( !init ){
			modifyMode( getInputHandle(),0x10/*_ENABLE_MOUSE_INPUT*/,);
			modifyMode( getOutPutHandle(),,4/*ENABLE_VIRTUAL_TERMINAL_PROCESSING*/);
			init = true;
	
			if( ..win[["title"]] ){
				setTitle(..win[["title"]]);
			}
		}
		return hwnd;   	
    })
}

fullscreen = function(){
	var hwnd = open();
	var s = ::User32.MapVirtualKey(0xD/*_VK_ENTER*/, 0) << 16 | 1 | 0x20000000;
	::User32.PostMessage(hwnd,0x104, 0xD/*_VK_ENTER*/ ,s );
	::User32.PostMessage(hwnd,0x105 ,0xD/*_VK_ENTER*/ ,s| 0xC0000000);
}

getText = function(s,len){
	open();
	if( s ) writeText( s );
	return  ..io.getText(len) ;	
}

writeText = function(s,...){
    var written = {INT size}; 
    s = tostring(s);
    if( (!..string.isUtf8(s)) && (!..string.isUnicode(s)) ){
		..string.setUtf(s,1);
	}
	
	s = ..string.toUnicode(s); 
	if( ::Kernel32.WriteConsoleB( 
		::Kernel32.GetStdHandle(-11/*_STD_OUTPUT_HANDLE*/),
		s,#s/2,written,null) ) {
			if(!...) return written.size;
			return writeText(...);
	}
	else {
		var e,c = ..lasterr();
		if( c == 0x8/*_ERROR_NOT_ENOUGH_MEMORY*/){
			return ..io.print(s,...));
		}
	}
}

print = function(...){ 
	open();
	var args = {...};
	var output = {};
	for(i,v in ..table.eachArgs(args) ){ 
		if(i>1)writeText('\t'); 
		writeText(tostring(v)); 
	}
	writeText('\n');
} 

log = print;

printf = function(s,...){
	if( ...!== null ) s = ..string.format(s,... )
	log( s )
}

hex = function(s){
	print( ..string.hex(s," ") )
}

writeBack = function( s,... ){
	if( ... !== null  ) s =  ..string.format(s,... );
	writeText( ..string.repeat(#(..string.fromto(s,,::Kernel32.GetConsoleOutputCP())),'\b') );
	writeText( s );
}

debug = function(x,...){
	if( _STUDIO_INVOKED ) open();
	stderr.write( tostring(x) ,'\t');
	if(...===null){ stderr.write('\n');return } 
	return debug(...);
}

class CONSOLE_SCREEN_BUFFER_INFO {
	struct size = {word x;word y};
	struct cursorPosition = {word x;word y}; 
	WORD attributes;
	struct srWindow = {word left;word top;word right;word bottom};
	struct maximumWindowSize = {word x;word y}; 
}

clearScreen = function(){
    var csbi = CONSOLE_SCREEN_BUFFER_INFO();
    var hConsole = getOutPutHandle(); 
    
    ::Kernel32.GetConsoleScreenBufferInfo(hConsole,csbi)
    var size = csbi.size.x * csbi.size.y;
    var cCharsWritten = { INT cChars = 0}
    ::Kernel32.FillConsoleOutputCharacter(hConsole,' '#,  size,0, cCharsWritten );
		
   ::Kernel32.GetConsoleScreenBufferInfo(hConsole,csbi);
   ::Kernel32.FillConsoleOutputAttribute(hConsole, csbi.wAttributes, size, 0, cCharsWritten);
   ::Kernel32.SetConsoleCursorPosition(hConsole, 0);
   ::Kernel32.SetConsoleTextAttribute(getOutPutHandle(),15);
}  

getScreenBufferInfo = function(x,y){
	var csbi = CONSOLE_SCREEN_BUFFER_INFO();
	if( ::Kernel32.GetConsoleScreenBufferInfo(getOutPutHandle(),csbi) )
		return csbi;
} 

getPos = function(x,y){
	var csbi = CONSOLE_SCREEN_BUFFER_INFO();
	if( ::Kernel32.GetConsoleScreenBufferInfo(getOutPutHandle(),csbi) )
		return csbi.cursorPosition.x,csbi.cursorPosition.y;
}

setPos = function(x,y){
	open();
	var x2,y2 = getPos();
	if( x === null ) x = x2;
	if( y === null ) y = y2;
	return !!::Kernel32.SetConsoleCursorPosition( getOutPutHandle(),::MAKELONG(x,y) )
}

box = function(x,y,x2,y2,clr,title){
	open(); 
	var csbi = CONSOLE_SCREEN_BUFFER_INFO();
	::Kernel32.GetConsoleScreenBufferInfo(getOutPutHandle(),csbi);
	if(!x) {
		x = ..math.floor( ( csbi.srWindow.right - csbi.srWindow.left - x2 ) / 2 );
		x2 = x + x2;
	}
	if(!y) {
		y = ..math.floor( ( csbi.srWindow.bottom - csbi.srWindow.top - y2 ) / 2 );
		y2 = y + y2;
	}
	x2 = x2 + ( 2 -( ( x2 - x ) % 2 ) ) 
	if(clr===null) return x,y,x2,y2;
	setTextAttribute(clr);  
	for(y=y;y2;1){
		for(x=x;x2-1){
			setPos(x,y);writeText(" ");
		}
	} 
	
	if( title ){
		title = title;
		setPos(x,y);writeText("┌")  
		setPos(x2-2,y);writeText("┐")  
		setPos(x,y2);writeText("└")  
		setPos(x2-2,y2);writeText("┘")  
		
		for (i=x+2;x2-4;2){
			setPos(i,y);writeText("─");
			setPos(i,y2);writeText("─");
		}
	
		for (i=y+1;y2-1){
			setPos(x,i);writeText("│");
			setPos(x2-2,i);writeText("│");
		}
	
		setPos(x+4,y);writeText(title);
		setPos(x+4,y+2);
	}
	else {
		setPos(x+2,y+1);
	}
	
	
	return x,y,x2,y2;
}
 
setTextAttribute = function(attr){
	if( type(attr) == type.number ) return ::Kernel32.SetConsoleTextAttribute(getOutPutHandle(),attr);
} 

readOutputCharacter = function(){
	var buffer = {WORD value[1000]}
	var ok = ::Kernel32.ReadConsoleOutputCharacterW( getOutPutHandle(),buffer,1000,0,{INT charsRead})
	return ..string.trim(buffer.value);
}

dump = function(v,...){
	open();
	if( type(v) == type.table ) writeText( ..util.table.stringify(v,!...) )
	else writeText( (tostring(v) ) )  
	if(...===null ){
		writeText('\n');
		return;
	}
	writeText('\t')
	return dump(...);
} 

setTitle = function(title){
	if(!::Kernel32.SetConsoleTitleW(title) ){
		open();
		return !!::Kernel32.SetConsoleTitleW(title);
	}
}

GetConsoleTitle = ::Kernel32.api( "GetConsoleTitleW", "INT(ustring& buf,INT size)");
getTitle = function(){
	var len,title = GetConsoleTitle(2000,1000);
	return title; 
}

getNumber = function( s,len ){
	var n;
	while( 
	    var _;
	    n = tonumber( getText(s,len),10 );
	    n === null
	) { 
		s = "请重新输入有效的数值: "
	}
	return n;
}

getCodePage = function(){
	return ::Kernel32.GetConsoleCP(),::Kernel32.GetConsoleOutputCP()
}

setCodePage = function(icp,ocp){
	return ::Kernel32.SetConsoleCP(icp) && ( ocp === null || ::Kernel32.SetConsoleOutputCP(ocp) );
}

dumpJson = function(v){ 
	log( ..web.json.stringify(v,true,false) );
}

close = ..io.close;
stdout = ..io.stdout;
stderr = ..io.stderr;
stdin = ..io.stdin; 
 
varDump = function(...){
	open();
    var args = {...};
    var b,e = ..table.range(args);
    for(i=b;e){
    	var arg = args[i];
    	var t = type(arg);
    	print("参数位置:" ++ i);
    	print("数据类型:" ++ t);
    	if( t != type.table ){
    		print("变量值:" ++ tostring(arg),'\n');
    	}
    	else { 
    		print("变量值: {" ); 
    		
    		var logged = { _struct = 1 };
    		for k,v in ..table.eachName(arg){
    			logged[k] = true;
    			writeText('    ', k,' = ',tostring(v) ,'\n');     
    		}
    		for(i=1;#arg;1){
    			logged[i] = true; 
    			writeText('    [', i,'] = ',tostring(arg[i]) ,'\n'); 
    		}
    		for(k,v in arg){
    			if( !logged[k] ){
    				writeText('    [', tostring(k),'] = ',tostring(v) ,'\n'); 
    			} 
    		}
    		 
            print('}');
            
            if(#arg){
            	print("序列数组长度:",#arg);
            }
            if(arg[["_struct"]]){
            	try{
            		print("结构体大小:",..raw.sizeof(arg) );
            	}
            	catch(e){
            		print("结构体大小:未知(包含动态数组)");
            	}
            }
            print('\n');
    	}  
    } 
}


/**intellisense(console)
open() = 打开控制台窗口,\n如果控制台窗口已打开,该函数不进行任何操作\n如果参数为true，则将console.utf8设为true,具体请参考console.utf8的说明
utf8 = 控制台是否启用UTF-8编码,\n启用这个选项在win10以下系统可能出现显示不正常的问题\n但有一些程序，例如electron主进程输出默认需要打开此选项\n一般建议关闭,aardio会自动将UTF8转换为ANSI并输出到控制台
getNumber( "请输入数值:__" ) = 读取用户输入的数值,\n如果用户输入错误的数值则显示错误提示并重新读取输入直到成功,\n可选在参数@2中指定缓冲区大小
getText( "请输入文本:__" ) = 此函数内部调用io.getText自控制台读取用户输入,\n可选在参数@2中指定缓冲区大小\n此函数不调用io.stdin.read等标准输入函数
writeText(__) = 直接写入控制台，\n参数支持UTF8/UTF16/ANSI字符串，\n支持1个或多个参数，但遇到null参数会停止输出后面的参数,\n注意这个函数不会自动打开控制台，\n此函数不调用io.stdout.write,io.print等标准输出函数\n并且可以支持更多的Unicode字符
log(__) = 调用console.writeText在控制台输出信息,支持多参数\n多个参数间使用制表符分隔，并且在最后输入一个换行,\n参数支持UTF8/UTF16/ANSI字符串，\n该函数可自动打开控制台窗口,而无需事先调用io.open();\n注意console.log与console.print指向同一函数\n如果是输出调试信息,建议大家使用console.debug函数
print("__") = 调用console.writeText在控制台输出信息,支持多参数\n多个参数间使用制表符分隔，并且在最后输入一个换行,\n参数支持UTF8/UTF16/ANSI字符串，\n该函数可自动打开控制台窗口,而无需事先调用io.open();\n注意console.log与console.print指向同一函数\n如果是输出调试信息,建议大家使用console.debug函数
printf("%s__", ) = 自动打开控制台\n调用console.log函数输出格式化字符串,\n格式化语法与string.format相同
hex(__) = 调用console.log以16进制输出字符串、或缓冲区的所有字节码
writeBack(__) = 控制台输出字符串并覆盖最后显示的等长字符\n如果有多个参数则调用string.format格式化后输出
fullscreen() = 控制台窗口全屏切换
modifyMode(.(输入输出句柄,移除模式,添加模式) = 设置控制台的显示模式\n参数用法参考 WINAPI SetConsoleMode\n参数@1如果省略则默认为标准输出句柄
debug("__") = 使用标准错误输出流(io.stderr)输出，可以重定向，\n用法类似io.print,该函数在开发环境中会自动打开控制台\n发布后的程序不会自动打开控制台
more(__/*分页大小*/) = 用于在循环语句中分页显示\n省略参数时则参数默认为1
askYesNo("按Y键继续,按N键取消") = 等待用户按Y或N键
kbHit() = 检测键盘有没有输入
peek() = 测试键盘有没有输入\n有则读取并返回keyEvent对象,否则返回空\n!console_kbevent.
clearInputBuffer() = 刷新控制台输入缓冲区\n丢弃缓冲区的所有输入
kbRead() = 读取用户按键返回keyEvent对象\n!console_kbevent.
kbRead(true) = 等待用户按任意键并返回keyEvent对象(不包含释放按键事件)
getch() = 读取输入字节码,中文字返回两个字节码\n控制台不回显字符
getche() = 读取输入字符\n控制台回显字符
getPassword() = 读取密码\n可选使用参数一指定控制台回显掩码,默认显示星号
getWindow() =  返回控制台窗口句柄\n使用此函数可判断当前是否已打开控制台窗口;
getOutPutHandle() = 标准输出句柄
getInputHandle() = 标准输入句柄
getErrorHandle() = 错误输出句柄
getCodePage() = 获取输入代码页,输出代码页
setCodePage(.(输入代码页,输出代码页) = 设置代码页\n应在打开控制台后使用该函数
readOutputCharacter() = 读取标准输出缓冲区文本
setTextAttribute(0xF2__) = 一位表示背景色,第二位表示前景色\n0=黑色 1=蓝色  2=绿色  3=湖蓝色  4=红色  5=紫色 6=黄色  7=白色 8=灰色  \n9=淡蓝色  A=淡绿色 B=淡浅绿色  C=淡红色  D=淡紫色 E=淡黄色  F=亮白色\n设置整个窗口的背景色请使用 execute("color F0") 
varDump(__/*变量*/) = 此函数显示一个或多个参数的类型与值
dump(__/*变量*/) = 显示变量的值,支持多参数\n注意仅显示普通table,string,number等类型的值,不显示函数等\ntable对象仅显示键名为字符串的值，以及数值索引自1开始的顺序数组
dumpJson(__/*变量*/) = 将对像转换为格式化的JSON文本并输出到控制台\n对象如果包含数值索引自1开始的顺序数组成员则转换为JSON数组\nJSON数组会忽略其他索引不在数组范围内的成员
close() = 关闭控制台
pause( = 暂停,\n按任意键继续
pause(.(按键后是否关闭控制台,提示) = 返回用户按键键码 
setTitle("__") = 设置控制台标题
getTitle() = 获取控制台标题
clearScreen () = 清屏
getScreenBufferInfo() = 返回屏幕缓冲区信息
getPos() = 返回光标坐标
setPos(.(列,行)= 设置光标坐标
box(.(列,行,终止列,终止行,背景色,边框标题) = 在控制台画一个色块,边框标题可省略,\n参数@1,@2省略则自动居中\n返回列,行,终止列,终止行
stderr = 标准错误输出\n!file.
stdin =  标准输入\n!file.
stdout = 标准输出\n!file.
setCtrlHandlerThread(hander,add) = @.setCtrlHandlerThread( function(ctrlType){
	__/*控制台程序退出前在触发此线程函数\nctrlType为null表示控制台正常关闭*/
});
end intellisense**/ 

/**intellisense()
console = 控制台扩展函数库
!console_kbevent.bKeyDown = 按键是否释放
!console_kbevent.wRepeatCount = 重复次数
!console_kbevent.wVirtualKeyCode = 虚拟键码
!console_kbevent.wVirtualScanCode = 扫描码
!console_kbevent.uChar.unicodeChar = Unicode字节码
!console_kbevent.uChar.asciiChar = ASCII字节码
!console_kbevent.uChar.dwControlKeyState = 控制键状态码
!console_kbevent.isShiftPressed = 是否按下SHIFT键
!console_kbevent.isScrLkOn = 是否打开ScrLk键 
!console_kbevent.isRightCtrlPressed = 是否按下右CTRL键
!console_kbevent.isRightAltPressed = 是否按下右ALT键
!console_kbevent.isLeftCtrlPressed = 是否按下左CTRL键
!console_kbevent.isLeftAltPressed = 是否按下左ALT键
!console_kbevent.isNumLkOn = 是否打开NumLk键
!console_kbevent.isCapsLkOn = 是否打开大写
!console_kbevent.isEnhanced = 是否扩展键
end intellisense**/